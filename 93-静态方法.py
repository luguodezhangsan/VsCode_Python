'''
静态方法的特点：
1. 需要通过装饰器 @staticmethod 来进行修饰，静态方法既不需要对象也不需要传递实例对象（形参没有 self/ cls）
2. 静态方法也能够通过 实例对象 和 类对象 去访问
使用场景：
1. 当方法中 既不需要使用实例对象（如实例对象，实例属性），也不需要使用类对象（如类属性、类方法、创建实例等）时，定义静态方法
2. 取消不需要的参数传递，有利于减少不必要的内存占用和消耗'''

# 1. 定义类，定义静态方法
class Dog(object):
    @staticmethod
    def info_print():
        print('这是一个狗类，用于创建狗的实例...')

# 2. 创建对象
dog1 = Dog()

# 3. 调用静态方法：类 和 对象
# 静态方法既可以使用对象访问，又可以使用类访问
dog1.info_print()
Dog.info_print()